package yalcr.extensions

case class MonadProxy[M[_], A](x: M[A])(implicit monad: Monad[M]) {
  def flatMap[B](位: A => M[B]): M[B] = monad.flatMap(x)(位)
  def map[B](位: A => B): M[B] = monad.map(x)(位)
  def withFilter(p: A => Boolean): M[A] = monad.filter(x)(p)
}

object MonadProxy {
  type Wrapper[M[_], A] = M[A] => MonadProxy[M, A]

  implicit def via[M[_], A](implicit monad: Monad[M]): Wrapper[M, A] = x => MonadProxy(x)
}